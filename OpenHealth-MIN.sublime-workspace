{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Con",
				"Controls"
			],
			[
				"pat",
				"patients"
			],
			[
				"do",
				"doctor_line"
			],
			[
				"stre",
				"street2_sel"
			],
			[
				"x_fir",
				"x_first_contact"
			],
			[
				"qr",
				"qr_obj"
			],
			[
				"va",
				"validate"
			],
			[
				"maek",
				"make_serial_number"
			],
			[
				"count",
				"counter_value"
			],
			[
				"ord",
				"ord_funcs"
			],
			[
				"rece",
				"receptor_ruc"
			],
			[
				"x_i",
				"check_x_id_doc"
			],
			[
				"recep",
				"receptor_id_doc_type"
			],
			[
				"ch",
				"check_and_generate"
			],
			[
				"J",
				"Junio"
			],
			[
				"V",
				"Vip"
			],
			[
				"Prod",
				"Productos"
			],
			[
				"or",
				"orders"
			],
			[
				"st",
				"string"
			],
			[
				"x_cre",
				"x_credit_note_amount"
			],
			[
				"el",
				"elif"
			],
			[
				"nr",
				"nr_consultations"
			],
			[
				"pro",
				"product_uom_qty"
			],
			[
				"up",
				"update"
			],
			[
				"dae",
				"date_array"
			],
			[
				"ap",
				"append"
			],
			[
				"date",
				"date_array"
			],
			[
				"x",
				"x_date_created"
			],
			[
				"x_credi",
				"x_credit_note_owner"
			],
			[
				"ret",
				"return"
			],
			[
				"ser",
				"serial_nr"
			],
			[
				"seri",
				"serial_nr"
			],
			[
				"product",
				"product_id"
			],
			[
				"order",
				"order_line"
			],
			[
				"Fil",
				"Filter"
			],
			[
				"days",
				"days_inactive"
			],
			[
				"Produ",
				"Productividad"
			],
			[
				"update_cu",
				"update_day_cumulative"
			],
			[
				"update",
				"update_days"
			],
			[
				"ne",
				"next_date"
			],
			[
				"is",
				"is_today"
			],
			[
				"C",
				"Controls"
			],
			[
				"Config",
				"Configurators"
			],
			[
				"id",
				"x_id_doc_type"
			],
			[
				"con",
				"control_date"
			],
			[
				"app",
				"appointment_date"
			],
			[
				"cont",
				"control_date"
			],
			[
				"pa",
				"patient_name"
			],
			[
				"new",
				"new_str"
			],
			[
				"M",
				"Month"
			],
			[
				"doc",
				"doctor_name"
			],
			[
				"x_id",
				"x_id_doc_type"
			],
			[
				"upd",
				"update_date_tags"
			],
			[
				"appoi",
				"appointment_date"
			],
			[
				"du",
				"duration_total"
			],
			[
				"amou",
				"amount_total"
			],
			[
				"data",
				"data_amount"
			],
			[
				"me",
				"mean_amount"
			],
			[
				"day",
				"day_line"
			],
			[
				"Dy",
				"Days"
			],
			[
				"Prom",
				"Promedio"
			],
			[
				"per_amo_to",
				"per_amo_total"
			],
			[
				"tot",
				"total_amount_year_2018"
			],
			[
				"to",
				"total_amount_year_2019"
			],
			[
				"yea",
				"year_create"
			],
			[
				"month",
				"month_create"
			],
			[
				"own",
				"owner_arr"
			],
			[
				"mon",
				"month"
			],
			[
				"Doc",
				"Doctor"
			],
			[
				"mana",
				"management"
			],
			[
				"dat",
				"date_begin"
			],
			[
				"Ma",
				"management"
			],
			[
				"dab",
				"date_bx"
			],
			[
				"delta",
				"delta_patients"
			],
			[
				"group",
				"groups"
			],
			[
				"no",
				"now_0"
			],
			[
				"Elec",
				"Electronic"
			],
			[
				"x_",
				"x_type"
			],
			[
				"cr",
				"crn_tot"
			],
			[
				"cos",
				"clos_funcs"
			],
			[
				"de",
				"destination"
			],
			[
				"csv",
				"csv_fname"
			],
			[
				"cre",
				"credit_note"
			],
			[
				"Pro",
				"Procedimientos"
			],
			[
				"per_amo_pro",
				"per_amo_procedures"
			],
			[
				"crea",
				"create_csv"
			],
			[
				"Cre",
				"Create"
			],
			[
				"amo",
				"amo_procedures"
			],
			[
				"acc",
				"acc_lib"
			],
			[
				"ticket_invoice_c",
				"ticket_invoice_create"
			],
			[
				"ti",
				"ticket_receipt"
			],
			[
				"ac",
				"activate_order"
			],
			[
				"can",
				"cancel_order"
			],
			[
				"corr",
				"correct_pm"
			],
			[
				"tes",
				"test_computes"
			],
			[
				"te",
				"test_actions"
			],
			[
				"an",
				"Anulación"
			],
			[
				"tpye",
				"type_arr"
			],
			[
				"fir",
				"_first_contact_list"
			],
			[
				"patien",
				"patient"
			],
			[
				"treat",
				"treatment"
			],
			[
				"ter",
				"treatment_ids"
			],
			[
				"ex",
				"export_txt"
			],
			[
				"x_na",
				"x_name_ticket"
			],
			[
				"ge",
				"generated_arr"
			],
			[
				"ele",
				"electronic_order"
			],
			[
				"na",
				"name_shorts"
			],
			[
				"sub",
				"subtotal"
			],
			[
				"pay",
				"payment_method"
			],
			[
				"Pay",
				"Payment"
			],
			[
				"che",
				"check_payment_method"
			],
			[
				"par",
				"partner_id"
			],
			[
				"x_paym",
				"x_payment_method"
			],
			[
				"Inte",
				"Interface"
			],
			[
				"De",
				"Devolución"
			],
			[
				"Docu",
				"Documento"
			],
			[
				"in",
				"invisible"
			],
			[
				"inv",
				"invoice"
			],
			[
				"Rec",
				"Receipt"
			],
			[
				"fna",
				"fname_txt"
			],
			[
				"tx",
				"txt_pack_name"
			],
			[
				"x_t",
				"x_test"
			],
			[
				"la",
				"laser_co2"
			],
			[
				"name",
				"name_short"
			],
			[
				"fla",
				"co2_flag"
			],
			[
				"pl",
				"pl_item_ids"
			],
			[
				"pri",
				"pricelist"
			],
			[
				"co",
				"corrector"
			]
		]
	},
	"buffers":
	[
		{
			"file": "med__openerp__.py",
			"settings":
			{
				"buffer_size": 10388,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\n \t\t*** Treatment\n\n \t\tCreated: \t\t\t26 Aug 2016\n \t\tLast up: \t \t\t17 Sep 2019\n\"\"\"\nfrom __future__ import print_function\nimport datetime\nfrom openerp import models, fields, api\nfrom . import time_funcs\nfrom . import treatment_vars\nfrom openerp.addons.openhealth.models.libs import creates as cre\nfrom openerp.addons.openhealth.models.libs import lib, user\n\nclass Treatment(models.Model):\n\n\t_inherit = 'openhealth.process'\n\t_name = 'openhealth.treatment'\n\t_order = 'write_date desc'\n\t_description = 'Treatment'\n\n\n\n\n\n# ----------------------------------------------------------- Number ofs --------------------------\n\n\t# Budgets - Consultations \t\t\t# DEP ?\n\tnr_budgets_cons = fields.Integer(\n\t\t\tstring=\"Presupuestos Consultas\",\n\n\t\t\tcompute=\"_compute_nr_budgets_cons\",\n\t)\n\t@api.multi\n\tdef _compute_nr_budgets_cons(self):\n\t\tfor record in self:\n\t\t\trecord.nr_budgets_cons = self.env['sale.order'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state', '=', 'draft'),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('x_family', '=', 'consultation'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('pl_family', 'like', 'CONSULTA'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\t# Invoices - Consultations\n\tnr_invoices_cons = fields.Integer(\n\t\t\tstring=\"Facturas Consultas\",\n\n\t\t\tcompute=\"_compute_nr_invoices_cons\",\n\t)\n\t@api.multi\n\tdef _compute_nr_invoices_cons(self):\n\t\tfor record in self:\n\t\t\trecord.nr_invoices_cons = self.env['sale.order'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state', '=', 'sale'),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('x_family', '=', 'consultation'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('pl_family', 'like', 'CONSULTA'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('pl_family', '=', 'CONSULTA,'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\n\n\n\t# Consultations\n\tnr_consultations = fields.Integer(\n\t\t\tstring=\"Nr Consultas\",\n\n\t\t\tcompute=\"_compute_nr_consultations\",\n\t)\n\t#@api.multi\n\t@api.depends('consultation_ids')\n\tdef _compute_nr_consultations(self):\n\t\tfor record in self:\n\t\t\tctr = 0\n\t\t\tfor c in record.consultation_ids:\n\t\t\t\tctr = ctr + 1\n\t\t\trecord.nr_consultations = ctr\n\n\n\n\n\t# Budgets - Proc   \t\t\t\t\t# DEP ?\n\tnr_budgets_pro = fields.Integer(\n\t\t\tstring=\"Presupuestos - Pro\",\n\n\t\t\tcompute=\"_compute_nr_budgets_pro\",\n\t)\n\t@api.multi\n\tdef _compute_nr_budgets_pro(self):\n\t\tfor record in self:\n\t\t\trecord.nr_budgets_pro = self.env['sale.order'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_family', '=', 'procedure'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state', '=', 'draft'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\t# Invoices - Proc\n\tnr_invoices_pro = fields.Integer(\n\t\t\tstring=\"Facturas\",\n\n\t\t\tcompute=\"_compute_nr_invoices_pro\",\n\t)\n\t@api.multi\n\tdef _compute_nr_invoices_pro(self):\n\t\tfor record in self:\n\t\t\trecord.nr_invoices_pro = self.env['sale.order'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_family', '=', 'procedure'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('state', '=', 'sale'),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\t# Procedures\n\tnr_procedures = fields.Integer(\n\t\t\tstring=\"Procedimientos\",\n\n\t\t\tcompute=\"_compute_nr_procedures\",\n\t)\n\t@api.multi\n\tdef _compute_nr_procedures(self):\n\t\tfor record in self:\n\t\t\trecord.nr_procedures = self.env['openhealth.procedure'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\n\t# Sessions\n\tnr_sessions = fields.Integer(\n\t\t\tstring=\"Sesiones\",\n\n\t\t\tcompute=\"_compute_nr_sessions\",\n\t)\n\t@api.multi\n\tdef _compute_nr_sessions(self):\n\t\tfor record in self:\n\t\t\trecord.nr_sessions = self.env['openhealth.session.med'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\t# Controls\n\tnr_controls = fields.Integer(\n\t\t\tstring=\"Controles\",\n\n\t\t\tcompute=\"_compute_nr_controls\",\n\t)\n\t@api.multi\n\tdef _compute_nr_controls(self):\n\t\tfor record in self:\n\t\t\trecord.nr_controls = 0\n\t\t\trecord.nr_controls = self.env['openhealth.control'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc', limit=1)\n\n\n\n\n# ----------------------------------------------------------- Test ------------------------\n\tx_test = fields.Boolean(\n\t\t\t'Test',\n\t\t)\n\n\n\n\n# ----------------------------------------------------------- Pricelist Fields - Dummy --------------------------------\n\n\t#report_product = fields.Char(\n\t#\t)\n\n\treport_product = fields.Many2one(\n\t\t\t#'price_list.container',\n\t\t\t'openhealth.container.pricelist',\n\t\t\tstring=\"PROD\",\n\t\t\t#required=True,\n\t\t)\n\n\n\n# ----------------------------------------------------------- Pricelist Fields - Test --------------------------------\n\n\tx_test_scenario = fields.Selection(\n\t\t\t[\n\t\t\t\t('credit_note', 'Nota de Credito'),\n\t\t\t\t('block_flow', 'Flujo bloqueado'),\n\n\n\t\t\t\t('all', 'All'),\n\t\t\t\t('product', 'product'),\n\t\t\t\t('laser', 'laser'),\n\t\t\t\t('cosmetology', 'cosmetology'),\n\t\t\t\t('medical', 'medical'),\n\t\t\t\t('new', 'new'),\n\t\t\t],\n\t\t\tstring=\"Test Scenarios\",\n\t\t)\n\n\n\ttest_pricelist_2019 = fields.Boolean(\n\t\t\t'PL 2019',\n\t\t\tdefault=False,\n\t\t)\n\n\ttest_pricelist_2018 = fields.Boolean(\n\t\t\t'PL 2018',\n\t\t\tdefault=False,\n\t\t)\n\n\n# ----------------------------------------------------------- Price List Fields - Relational ----------------------------------------------\n\t# Management\n\treport_management = fields.Many2one(\n\t\t\t'openhealth.management',\n\t\t\tstring=\"MGT\",\n\t\t)\n\n\t# Marketing\n\treport_marketing = fields.Many2one(\n\t\t\t'openhealth.marketing',\n\t\t\tstring=\"MKT\",\n\t\t)\n\n\t# Contasis\n\treport_contasis = fields.Many2one(\n\t\t\t'openhealth.account.contasis',\n\t\t\tstring=\"ACC\",\n\t\t)\n\n\t# Txt\n\treport_account = fields.Many2one(\n\t\t\t'openhealth.container',\n\t\t\tstring=\"TXT\",\n\t\t)\n\n\n\n\n# ----------------------------------------------------------- Conversion ------------------------\n\n\tappointment_ids = fields.Char()\n\n\n\n\n# ----------------------------------------------------------- Dep !!! ------------------------\n\t# Appointments\n\t#appointment_ids = fields.One2many(\n\t#\t\t'oeh.medical.appointment',\n\t#\t\t'treatment',\n\t#\t\tstring=\"Citas\",\n\t#\t)\n\n\t# Reservations\n\t#reservation_ids = fields.One2many(\n\t#\t\t'oeh.medical.appointment',\n\t#\t\t'treatment',\n\t#\t\tstring=\"Reserva de sala\",\n\t#\t\tdomain=[\n\t\t\t\t\t\t#('x_machine', '!=', 'false'),\n\t#\t\t\t\t],\n\t#\t\t)\n\n\n\t# Appointments\n\t#nr_appointments = fields.Integer(\n\t#\t\tstring=\"Citas\",\n\t#\t\tcompute=\"_compute_nr_appointments\",\n\t#)\n\t#@api.multi\n\t#def _compute_nr_appointments(self):\n\t#\tfor record in self:\n\t#\t\trecord.nr_appointments = self.env['oeh.medical.appointment'].search_count([\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('x_target', '=', 'doctor'),\n\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\n\n\n# ----------------------------------------------------------- All Services - Dep ? ------------------------\n\t# Product\n\t@api.multi\n\tdef create_service_product(self):\n\t\t#ret = reco_funcs.create_service_product(self)\n\t\treturn 0\n\n\t# Co2\n\t@api.multi\n\tdef create_service_co2(self):\n\t\t#ret = reco_funcs.create_service_co2(self)\n\t\treturn 0\n\n\t# Quick\n\t@api.multi\n\tdef create_service_quick(self):\n\t\t#ret = reco_funcs.create_service_quick(self)\n\t\treturn 0\n\n\t# Excilite\n\t@api.multi\n\tdef create_service_excilite(self):\n\t\t#ret = reco_funcs.create_service_excilite(self)\n\t\treturn 0\n\n\t# Ipl\n\t@api.multi\n\tdef create_service_ipl(self):\n\t\t#ret = reco_funcs.create_service_ipl(self)\n\t\treturn 0\n\n\t# Ndyag\n\t@api.multi\n\tdef create_service_ndyag(self):\n\t\t#ret = reco_funcs.create_service_ndyag(self)\n\t\treturn 0\n\n\t# Medical\n\t@api.multi\n\tdef create_service_medical(self):\n\t\t#ret = reco_funcs.create_service_medical(self)\n\t\treturn 0\n\n\t# Cosmetology\n\t@api.multi\n\tdef create_service_cosmetology(self):\n\t\t#ret = reco_funcs.create_service_cosmetology(self)\n\t\treturn 0\n\n\n\n\n# ----------------------------------------------------------- Test --------------------------------\n\n\n\t# Electronic\n\telectronic_order = fields.One2many(\n\t\t\t'openhealth.electronic.order',\n\t\t\t'treatment_id',\n\t\t)\n\n\n# ----------------------------------------------------------- Optimization ------------------------\n\tdelta_1 = fields.Float(\n\t\t\t'Delta 1',\n\t\t)\n\n\tdelta_2 = fields.Float(\n\t\t\t'Delta 2',\n\t\t)\n\n\n# ----------------------------------------------------------- Vip  --------------------------------\n\n\t# Vip\n\tvip = fields.Boolean(\n\t\tstring=\"VIP\",\n\t\t#default=False,\n\n\t\tcompute='_compute_vip',\n\t)\n\t@api.multi\n\tdef _compute_vip(self):\n\t\tfor record in self:\n\t\t\tcard = record.env['openhealth.card'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient_name', '=', record.patient.name),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,)\n\t\t\tif card.name != False:\n\t\t\t\trecord.vip = True\n\n\n\n\n\t# Pricelist\n\tpricelist_id = fields.Many2one(\n\t\t\t'product.pricelist',\n\t\t\tstring='Pricelist',\n\t\t\treadonly=True,\n\t\t\t#states={'draft': [('readonly', False)], 'sent': [('readonly', False)]},\n\t\t\t#help=\"Pricelist for current sales order.\",\n\n\t\t\tcompute='_compute_pricelist_id',\n\t)\n\t@api.multi\n\tdef _compute_pricelist_id(self):\n\t\tfor record in self:\n\n\t\t\trecord.pricelist_id = record.patient.property_product_pricelist\n\n\n\n# ----------------------------------------------------------- Create Procedure  -------------------\n\t# Create Procedure\n\t@api.multi\n\tdef create_procedure(self, date_app, subtype, product_id):\n\t\t#print\n\t\t#print 'Create Procedure'\n\t\tret = cre.create_procedure_go(self, date_app, subtype, product_id)\n\t# create_procedure\n\n\n\n# ----------------------------------------------------------- Create Controls  --------------------\n\t# Create Controls\n\t@api.multi\n\tdef create_controls(self):\n\t\t#print\n\t\t#print 'Create Controls'\n\t\tcontrol_date = self.start_date\n\t\tpatient_id = self.patient.id\n\t\tdoctor_id = self.physician.id\n\t\ttreatment_id = self.id\n\t\tchief_complaint = self.chief_complaint\n\n\t\t# Create Control\n\t\tcontrol = self.control_ids.create({\n\t\t\t\t\t\t\t\t\t\t\t'evaluation_start_date':control_date,\n\t\t\t\t\t\t\t\t\t\t\t'first_date':control_date,\n\t\t\t\t\t\t\t\t\t\t\t'patient':patient_id,\n\t\t\t\t\t\t\t\t\t\t\t'doctor':doctor_id,\n\t\t\t\t\t\t\t\t\t\t\t'chief_complaint':chief_complaint,\n\t\t\t\t\t\t\t\t\t\t\t'treatment': treatment_id,\n\n\t\t\t\t\t\t\t\t\t\t\t#'appointment': appointment_id,\n\t\t\t\t\t\t\t\t\t\t\t#'product':product_id,\n\t\t\t\t\t\t\t\t\t\t\t#'procedure':procedure_id,\n\t\t\t\t\t\t\t\t\t})\n\t# create_controls\n\n\n\n# ----------------------------------------------------------- Testing Booleans --------------------\n\n\t# Create Flags\n\n\t# Sessions\n\tses_create = fields.Boolean(\n\t\t\tstring=\"Ses\",\n\t\t\tdefault=False,\n\t\t)\n\n\t# Controls\n\tcon_create = fields.Boolean(\n\t\t\tstring=\"Con\",\n\t\t\tdefault=False,\n\t\t)\n\n\n\n\t# Laser\n\tco2_create = fields.Boolean(\n\t\t\tstring=\"Co2\",\n\t\t\tdefault=False,\n\t\t)\n\n\texc_create = fields.Boolean(\n\t\t\tstring=\"Exc\",\n\t\t\tdefault=False,\n\t\t)\n\n\tipl_create = fields.Boolean(\n\t\t\tstring=\"Ipl\",\n\t\t\tdefault=False,\n\t\t)\n\n\tndy_create = fields.Boolean(\n\t\t\tstring=\"Ndyag\",\n\t\t\tdefault=False,\n\t\t)\n\n\tqui_create = fields.Boolean(\n\t\t\tstring=\"Quick\",\n\t\t\tdefault=False,\n\t\t)\n\n\t# Medical\n\tmed_create = fields.Boolean(\n\t\t\tstring=\"Med\",\n\t\t\tdefault=False,\n\t\t)\n\n\t# Cosmeto\n\tcos_create = fields.Boolean(\n\t\t\tstring=\"Cos\",\n\t\t\tdefault=False,\n\t\t)\n\n\t# Vip\n\tvip_create = fields.Boolean(\n\t\t\tstring=\"Vip\",\n\t\t\tdefault=False,\n\t\t)\n\n\t# Product\n\tproduct_create = fields.Boolean(\n\t\t\tstring=\"Product\",\n\t\t\tdefault=False,\n\t\t)\n\n\n\n\n# ----------------------------------------------------------- Reload ------------------------------\n\n\t# Reload\n\t@api.multi\n\tdef reload(self):\n\t\t#print\n\t\t#print 'Reload'\n\t\treturn {\n\t\t\t\t'type': 'ir.actions.client',\n\t\t\t\t'tag': 'reload',\n\t\t}\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Create Procedure Manual  ------------\n\t@api.multi\n\tdef create_procedure_man(self):\n\t\t#print\n\t\t#print 'Create Procedure - Manual'\n\n\n\t\t# Loop - Create Procedures\n\t\tret = 0\n\t\tfor order in self.order_pro_ids:\n\n\t\t\tif order.state == 'sale':\n\n\t\t\t\t# Update\n\t\t\t\torder.x_procedure_created = True\n\n\t\t\t\t# Loop\n\t\t\t\tfor line in order.order_line:\n\n\n\t\t\t\t\t# Init\n\t\t\t\t\tdate_app = order.date_order\n\t\t\t\t\tproduct_id = line.product_id\n\n\t\t\t\t\t# Search\n\t\t\t\t\tproduct_template = self.env['product.template'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_name_short', '=', product_id.x_name_short),\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\n\t\t\t\t\tsubtype = product_template.x_treatment\n\n\t\t\t\t\tret = cre.create_procedure_go(self, date_app, subtype, product_id.id)\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Manual ------------------------------\n\n\t# Manual\n\tadd_procedures = fields.Boolean(\n\t\t\tstring=\"Control Manual\",\n\t\t\tdefault=False,\n\t\t)\n\n\t# Reset\n\t@api.multi\n\tdef reset_procs(self):\n\t\tself.add_procedures = False\n\n\t# Toggle\n\t@api.multi\n\tdef toggle_add_procedures(self):\n\t\tself.add_procedures = not self.add_procedures\n\n\n\n# ----------------------------------------------------------- Alta --------------------------------\n\n\t# Closed\n\ttreatment_closed = fields.Boolean(\n\t\t\tstring=\"De Alta\",\n\t\t\tdefault=False,\n\t\t)\n\n\n\n# ----------------------------------------------------------- Canonical ---------------------------\n\n\t# Name\n\tname = fields.Char(\n\t\t\tstring=\"Tratamiento #\",\n\n\t\t\tcompute='_compute_name',\n\t\t)\n\t@api.multi\n\t#@api.depends('start_date')\n\tdef _compute_name(self):\n\t\tfor record in self:\n\t\t\trecord.name = 'TR0000' + str(record.id)\n\n\n\t# Space\n\tvspace = fields.Char(\n\t\t\t' ',\n\t\t\treadonly=True\n\t\t)\n\n\n\t# Active\n\tactive = fields.Boolean(\n\t\t\tdefault=True,\n\t\t)\n\n\n\n\n# ----------------------------------------------------------- Macro -------------------------------\n\n\t# Sex\n\tpatient_sex = fields.Char(\n\t\t\tstring=\"Sexo\",\n\n\t\t\tcompute='_compute_patient_sex',\n\t\t)\n\n\t@api.multi\n\tdef _compute_patient_sex(self):\n\t\t#print\n\t\t#print 'Compute Patient Sex'\n\t\tfor record in self:\n\t\t\t#print 'record'\n\t\t\tif record.patient.sex != False:\n\t\t\t\trecord.patient_sex = record.patient.sex[0]\n\n\n\t# Age\n\tpatient_age = fields.Char(\n\t\t\tstring=\"Edad\",\n\n\t\t\tcompute='_compute_patient_age',\n\t\t)\n\n\t@api.multi\n\tdef _compute_patient_age(self):\n\t\t#print\n\t\t#print 'Compute Patient Age'\n\t\tfor record in self:\n\t\t\t#print 'record'\n\t\t\tif record.patient.age != False:\n\t\t\t\trecord.patient_age = record.patient.age.split()[0]\n\n\n\t# City\n\tpatient_city = fields.Char(\n\t\t\tstring=\"Lugar de procedencia\",\n\n\t\t\tcompute='_compute_patient_city',\n\t\t)\n\n\t@api.multi\n\tdef _compute_patient_city(self):\n\t\t#print\n\t\t#print 'Compute Patient City'\n\t\tfor record in self:\n\t\t\t#print 'record'\n\t\t\tif record.patient.city_char != False:\n\t\t\t\tcity = record.patient.city_char\n\t\t\t\trecord.patient_city = city.title()\n\n\n\n\n\n# ----------------------------------------------------------- Vip in prog -------------------------\n\n\t# Vip in progress\n\tx_vip_inprog = fields.Boolean(\n\t\t\tstring=\"Vip en progreso\",\n\t\t\tdefault=False,\n\n\t\t\tcompute='_compute_vip_inprog',\n\t\t)\n\n\t@api.multi\n\tdef _compute_vip_inprog(self):\n\t\tfor record in self:\n\t\t\tnr_vip = self.env['openhealth.service.product'].search_count([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', record.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('service', 'in', ['tarjeta vip', 'Tarjeta Vip', 'Tarjeta VIP', 'TARJETA VIP']),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#('state','=', 'draft'),\n\t\t\t\t])\n\t\t\tif nr_vip > 0:\n\t\t\t\trecord.x_vip_inprog = True\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Relational --------------------------\n\n\tconsultation_ids = fields.One2many(\n\t\t\t'openhealth.consultation',\n\t\t\t'treatment',\n\t\t\tstring=\"Consultas\",\n\t\t)\n\n\n\tprocedure_ids = fields.One2many(\n\t\t\t'openhealth.procedure',\n\t\t\t'treatment',\n\t\t\tstring=\"Procedimientos\",\n\t\t)\n\n\tsession_ids = fields.One2many(\n\t\t\t'openhealth.session.med',\n\t\t\t'treatment',\n\t\t\tstring=\"Sesiones\",\n\t\t)\n\n\tcontrol_ids = fields.One2many(\n\t\t\t'openhealth.control',\n\t\t\t'treatment',\n\t\t\tstring=\"Controles\",\n\t\t)\n\n\n\n\t# Orders\n\torder_ids = fields.One2many(\n\t\t\t'sale.order',\n\t\t\t'treatment',\n\t\t\tstring=\"Presupuestos\",\n\t\t)\n\n\t# Orders Procedures\n\torder_pro_ids = fields.One2many(\n\t\t\t'sale.order',\n\t\t\t'treatment',\n\t\t\tstring=\"Presupuestos\",\n\t\t\tdomain=[\n\t\t\t\t\t\t#('x_family', '=', 'procedure'),\n\t\t\t\t\t\t('x_family', 'in', ['procedure', 'cosmetology']),\n\t\t\t\t\t],\n\t\t)\n\n\n\n\n\n# ----------------------------------------------------------- Services ----------------------------\n\n\t# Product\n\tservice_product_ids = fields.One2many(\n\n\t\t\t'openhealth.service.product',\n\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios Producto\"\n\t\t)\n\n\n\t# Vip\n\tservice_vip_ids = fields.One2many(\n\t\t\t'openhealth.service.vip',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios vip\"\n\t\t)\n\n\n\n\n\n\t# Service\n\tservice_ids = fields.One2many(\n\t\t\t'openhealth.service',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios\"\n\t\t)\n\n\t# Quick\n\tservice_quick_ids = fields.One2many(\n\t\t\t'openhealth.service.quick',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios quick\"\n\t\t\t)\n\n\t# Co2\n\tservice_co2_ids = fields.One2many(\n\t\t\t'openhealth.service.co2',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios Co2\"\n\t\t\t)\n\n\t# Excilite\n\tservice_excilite_ids = fields.One2many(\n\t\t\t'openhealth.service.excilite',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios Excilite\"\n\t\t\t)\n\n\t# Ipl\n\tservice_ipl_ids = fields.One2many(\n\t\t\t'openhealth.service.ipl',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios ipl\"\n\t\t\t)\n\n\t# Ndyag\n\tservice_ndyag_ids = fields.One2many(\n\t\t\t'openhealth.service.ndyag',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios ndyag\"\n\t\t\t)\n\n\t# Medical\n\tservice_medical_ids = fields.One2many(\n\t\t\t'openhealth.service.medical',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios medical\"\n\t\t\t)\n\n\t# Cosmetology\n\tservice_cosmetology_ids = fields.One2many(\n\t\t\t'openhealth.service.cosmetology',\n\t\t\t'treatment',\n\t\t\tstring=\"Servicios cosmeatria\"\n\t\t)\n\n\n\n\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Consultation Progress ---------------\n\n\t# Consultation progress\n\tconsultation_progress = fields.Float(\n\t\t\tdefault=0,\n\n\t\t\tcompute=\"_compute_progress\",\n\t\t)\n\n\t@api.multi\n\t#@api.depends('consultation_ids')\n\tdef _compute_progress(self):\n\t\tfor record in self:\n\t\t\tfor con in record.consultation_ids:\n\t\t\t\trecord.consultation_progress = con.progress\n\n\n\n# ----------------------------------------------------------- State -------------------------------\n\n\t# State\n\tstate = fields.Selection(\n\n\t\t\tselection=treatment_vars._state_list,\n\t\t\n\t\t\tstring='Estado',\n\t\t\tdefault='empty',\n\n\t\t\tcompute=\"_compute_state\",\n\t\t)\n\n\n\n\t@api.multi\n\t#@api.depends('consultation_ids')\n\tdef _compute_state(self):\n\t\tfor record in self:\n\n\t\t\t# Init\n\t\t\tstate = 'empty'\n\n\n\t\t\tif record.treatment_closed:\n\t\t\t\tstate = 'done'\n\n\t\t\telif record.nr_controls > 0:\n\t\t\t\tstate = 'controls'\n\n\t\t\telif record.nr_sessions > 0:\n\t\t\t\tstate = 'sessions'\n\n\t\t\telif record.nr_procedures > 0:\n\t\t\t\tstate = 'procedure'\n\n\t\t\telif record.nr_invoices_pro > 0:\n\t\t\t\tstate = 'invoice_procedure'\n\n\t\t\telif record.nr_budgets_pro > 0:\n\t\t\t\tstate = 'budget_procedure'\n\n\t\t\telif record.nr_services > 0:\n\t\t\t\tstate = 'service'\n\n\t\t\telif record.consultation_progress == 100:\n\t\t\t\tstate = 'consultation'\n\n\t\t\telif record.nr_invoices_cons > 0:\n\t\t\t\tstate = 'invoice_consultation'\n\n\t\t\telif record.nr_budgets_cons > 0:\n\t\t\t\tstate = 'budget_consultation'\n\n\t\t\t#elif record.nr_appointments > 0:\n\t\t\t#\tstate = 'appointment'\n\n\n\t\t\t# Assign\n\t\t\trecord.state = state\n\n\t# _compute_state\n\n\n\n\n# ----------------------------------------------------------- Number ofs - Services ---------------\n\t# Number of Services\n\tnr_services = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services(self):\n\t\tfor record in self:\n\t\t\tquick =\tself.env['openhealth.service.quick'].search_count([('treatment', '=', record.id),])\n\t\t\tco2 = self.env['openhealth.service.co2'].search_count([('treatment', '=', record.id),])\n\t\t\texc = self.env['openhealth.service.excilite'].search_count([('treatment', '=', record.id),])\n\t\t\tipl = self.env['openhealth.service.ipl'].search_count([('treatment', '=', record.id),])\n\t\t\tndyag = self.env['openhealth.service.ndyag'].search_count([('treatment', '=', record.id),])\n\t\t\tmedical = self.env['openhealth.service.medical'].search_count([('treatment', '=', record.id),])\n\t\t\tvip = self.env['openhealth.service.vip'].search_count([('treatment', '=', record.id),])\n\t\t\tproduct = self.env['openhealth.service.product'].search_count([('treatment', '=', record.id),])\n\n\t\t\trecord.nr_services = quick + co2 + exc + ipl + ndyag + medical + vip + product\n\n\n\n\t# product\n\tnr_services_product = fields.Integer(\n\t\t\tstring=\"Servicios Producto\",\n\n\t\t\tcompute=\"_compute_nr_services_product\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_product(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.product'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_product = services\n\n\n\n\t# vip\n\tnr_services_vip = fields.Integer(\n\t\t\tstring=\"Servicios vip\",\n\n\t\t\tcompute=\"_compute_nr_services_vip\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_vip(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.vip'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_vip = services\n\n\n\n\n\t# Quick\n\tnr_services_quick = fields.Integer(\n\t\t\tstring=\"Servicios Quick\",\n\n\t\t\tcompute=\"_compute_nr_services_quick\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_quick(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.quick'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_quick = services\n\n\n\n\t# Co2\n\tnr_services_co2 = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services_co2\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_co2(self):\n\t\tfor record in self:\n\t\t\t#services = self.env['openhealth.service.co2'].search_count([('treatment', '=', record.id),])\n\t\t\tservices = self.env['openhealth.service.co2'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_co2 = services\n\n\n\n\t# excilite\n\tnr_services_excilite = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services_excilite\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_excilite(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.excilite'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_excilite = services\n\n\n\t# ipl\n\tnr_services_ipl = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services_ipl\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_ipl(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.ipl'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_ipl = services\n\n\n\n\t# ndyag\n\tnr_services_ndyag = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services_ndyag\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_ndyag(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.ndyag'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_ndyag = services\n\n\n\n\t# medical\n\tnr_services_medical = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services_medical\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_medical(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.medical'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_medical = services\n\n\n\n\n\n\t# Cosmetology\n\tnr_services_cosmetology = fields.Integer(\n\t\t\tstring=\"Servicios\",\n\n\t\t\tcompute=\"_compute_nr_services_cosmetology\",\n\t)\n\t@api.multi\n\tdef _compute_nr_services_cosmetology(self):\n\t\tfor record in self:\n\t\t\tservices = self.env['openhealth.service.cosmetology'].search_count([('treatment', '=', record.id),])\n\t\t\trecord.nr_services_cosmetology = services\n\n\n\n\n\n\n# ----------------------------------------------------------- Open Myself -------------------------\n\t# Open Myself\n\t@api.multi\n\tdef open_myself(self):\n\n\t\ttreatment_id = self.id\n\n\t\treturn {\n\t\t\t# Mandatory\n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Consultation Current',\n\t\t\t# Window action\n\t\t\t'res_model': 'openhealth.treatment',\n\t\t\t'res_id': treatment_id,\n\t\t\t# Views\n\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\t\t\t#'view_id': view_id,\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False,\n\t\t\t'flags': {\n\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t},\n\t\t\t'context':   {}\n\t\t}\n\t# open_myself\n\n\n\n\n\n\n\n# ----------------------------------------------------------- Creates - Manual, Process and Testing -----------\n\n\n\n# ----------------------------------------------------------- Create Order - Fields ---------------------------\n\n\t# Partner\n\tpartner_id = fields.Many2one(\n\t\t\t'res.partner',\n\t\t\tstring=\"Cliente\",\n\n\t\t\tcompute='_compute_partner_id',\n\t\t)\n\n\t#@api.multi\n\t@api.depends('patient')\n\tdef _compute_partner_id(self):\n\t\tfor record in self:\n\t\t\tpartner = record.env['res.partner'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('name', 'like', record.patient.name),\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,)\n\n\t\t\trecord.partner_id = partner\n\t# _compute_partner_id\n\n\n\n\n\n\n# ----------------------------------------------------------- Create Order Consultation  ----------\n\t@api.multi\n\tdef create_order_con_tst(self):\n\n\t\t# Init\n\t\ttarget = 'consultation'\n\n\t\t# Create\n\t\torder = cre.create_order(self, target)\n\n\t\treturn order\n\n\n\n# ----------------------------------------------------------- Create Order Consultation  ----------\n\t@api.multi\n\tdef create_order_con(self):\n\n\t\t# Init\n\t\ttarget = 'consultation'\n\n\t\t# Create\n\t\torder = cre.create_order(self, target)\n\n\t\t# Open\n\t\treturn {\n\t\t\t\t# Created\n\t\t\t\t'res_id': order.id,\n\t\t\t\t# Mandatory\n\t\t\t\t'type': 'ir.actions.act_window',\n\t\t\t\t'name': 'Open Order Current',\n\t\t\t\t# Window action\n\t\t\t\t'res_model': 'sale.order',\n\t\t\t\t# Views\n\t\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t\t'view_mode': 'form',\n\t\t\t\t'target': 'current',\n\t\t\t\t#'view_id': view_id,\n\t\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t\t#'auto_search': False,\n\t\t\t\t'flags': {\n\t\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t\t},\n\t\t\t\t'context': {}\n\t\t\t}\n\t# create_order_con\n\n\n\n\n\n\n\n# -----------------------------------------------------------  Create Order Pro  ------------------\n\t@api.multi\n\tdef create_order_pro(self):\n\n\t\ttarget = 'procedure'\n\n\t\torder = cre.create_order(self, target)\n\n\t\treturn {\n\t\t\t\t# Created\n\t\t\t\t'res_id': order.id,\n\t\t\t\t# Mandatory\n\t\t\t\t'type': 'ir.actions.act_window',\n\t\t\t\t'name': 'Open Order Current',\n\t\t\t\t# Window action\n\t\t\t\t'res_model': 'sale.order',\n\t\t\t\t# Views\n\t\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t\t'view_mode': 'form',\n\t\t\t\t'target': 'current',\n\t\t\t\t#'view_id': view_id,\n\t\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t\t#'auto_search': False,\n\t\t\t\t'flags': {\n\t\t\t\t\t\t'form': {'action_buttons': True, }\n\t\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t\t},\n\t\t\t\t'context': {}\n\t\t\t}\n\t# create_order_pro\n\n\n\n\n# ----------------------------------------------------- Create Consultation -----------------------\n\t# Create Consultation\n\t@api.multi\n\tdef create_consultation(self):\n\n\t\t# Init vars\n\t\tpatient_id = self.patient.id\n\t\ttreatment_id = self.id\n\t\tchief_complaint = self.chief_complaint\n\n\n\t\t# Doctor\n\t\tdoctor = user.get_actual_doctor(self)\n\t\tdoctor_id = doctor.id\n\n\t\tif doctor_id == False:\n\t\t\tdoctor_id = self.physician.id\n\n\n\t\t# Date\n\t\tGMT = time_funcs.Zone(0, False, 'GMT')\n\t\t#evaluation_start_date = datetime.now(GMT).strftime(\"%Y-%m-%d %H:%M:%S\")\n\t\tevaluation_start_date = datetime.datetime.now(GMT).strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\n\n\t\t# Apointment\n\t\t#if False:\n\t\t#\tappointment = self.env['oeh.medical.appointment'].search([\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('patient', '=', self.patient.name),\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('doctor', '=', self.physician.name),\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('x_type', '=', 'consultation'),\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\torder='appointment_date desc', limit=1)\n\t\t#\tappointment_id = appointment.id\n\t\t\n\t\t#appointment_id = False\n\n\n\n\n\n\t\t# Search\n\t\tconsultation = self.env['openhealth.consultation'].search([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t('treatment', '=', self.id),\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#order='appointment_date desc',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlimit=1,)\n\t\t# Create if it does not exist\n\t\tif consultation.name == False:\n\n\t\t\t# Change App state\n\t\t\t#if False:\n\t\t\t#\tif appointment.name != False:\n\t\t\t#\t\tappointment.state = 'Scheduled'\n\n\n\t\t\t# Consultation\n\t\t\tconsultation = self.env['openhealth.consultation'].create({\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'patient': patient_id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'treatment': treatment_id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'evaluation_start_date': evaluation_start_date,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'chief_complaint': chief_complaint,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#'appointment': appointment_id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'doctor': doctor_id,\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\tconsultation_id = consultation.id\n\n\n\t\t\t# Update\n\t\t\t#if False:\n\t\t\t#\trec_set = self.env['oeh.medical.appointment'].browse([\n\t\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tappointment_id\n\t\t\t#\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t#\tret = rec_set.write({\n\t\t\t#\t\t\t\t\t\t\t'consultation': consultation_id,\n\t\t\t#\t\t\t\t\t\t})\n\n\n\n\t\tconsultation_id = consultation.id\n\n\t\t# Update Patient\n\t\t#consultation.update_patient()\n\n\t\treturn {\n\n\t\t\t# Mandatory\n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Consultation Current',\n\t\t\t# Window action\n\t\t\t'res_model': 'openhealth.consultation',\n\t\t\t'res_id': consultation_id,\n\t\t\t# Views\n\t\t\t\"views\": [[False, \"form\"]],\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\t\t\t#'view_id': view_id,\n\t\t\t#'view_id': 'oeh_medical_evaluation_view',\n\t\t\t#'view_id': 'oehealth.oeh_medical_evaluation_view',\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False,\n\t\t\t'flags': {\n\t\t\t\t\t\t'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t\t#'form': {'action_buttons': True, }\n\t\t\t\t\t},\n\t\t\t'context':   {\n\t\t\t\t\t\t\t'search_default_treatment': treatment_id,\n\t\t\t\t\t\t\t'default_patient': patient_id,\n\t\t\t\t\t\t\t'default_doctor': doctor_id,\n\t\t\t\t\t\t\t'default_treatment': treatment_id,\n\t\t\t\t\t\t\t'default_evaluation_start_date': evaluation_start_date,\n\t\t\t\t\t\t\t'default_chief_complaint': chief_complaint,\n\t\t\t\t\t\t\t#'default_appointment': appointment_id,\n\t\t\t}\n\t\t}\n\t# create_consultation_man\n\n\n\n\n\n# ----------------------------------------------------------- Create Service (Recommendation) -----\n\n\t# Create Service\n\t@api.multi\n\tdef create_service(self):\n\t\t#print\n\t\t#print 'Create Service'\n\n\t\t# Init\n\t\tres_id = self.id\n\t\tres_model = 'openhealth.treatment'\n\t\tview_id = self.env.ref('openhealth.treatment_2_form_view').id\n\t\t#print view_id\n\n\t\t# Open\n\t\treturn {\n\t\t\t# Mandatory\n\t\t\t'type': 'ir.actions.act_window',\n\t\t\t'name': 'Open Treatment Current',\n\t\t\t# Window action\n\t\t\t'priority': 1,\n\t\t\t'res_id': res_id,\n\t\t\t'res_model': res_model,\n\t\t\t#'view_id': view_id,\n\t\t\t# Views\n\t\t\t#\"views\": [[False, \"form\"]],\n\n\n\t\t\t\"views\": [[view_id, \"form\"]],\n\n\n\t\t\t'view_mode': 'form',\n\t\t\t'target': 'current',\n\t\t\t#\"domain\": [[\"patient\", \"=\", self.patient.name]],\n\t\t\t#'auto_search': False,\n\t\t\t'flags': {\n\t\t\t\t\t#'form': {'action_buttons': True, 'options': {'mode': 'edit'}}\n\t\t\t\t\t#'form': {'action_buttons': True, }\n\t\t\t\t\t'form': {'action_buttons': False, }\n\t\t\t\t\t},\n\t\t\t'context': {\n\t\t\t\t\t\t#'default_treatment': treatment_id,\n\t\t\t\t\t}\n\t\t}\n\t# create_service\n\n\n\n",
			"file": "models/emr/treatment.py",
			"file_size": 30105,
			"file_write_time": 132132292610000000,
			"settings":
			{
				"buffer_size": 30202,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/treatments/treatment.xml",
			"settings":
			{
				"buffer_size": 25646,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/services/service_actions.xml",
			"settings":
			{
				"buffer_size": 5371,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/services/service.xml",
			"settings":
			{
				"buffer_size": 11610,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/patient/patient.py",
			"settings":
			{
				"buffer_size": 23761,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/order/order.py",
			"settings":
			{
				"buffer_size": 34266,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/order/ord_funcs.py",
			"settings":
			{
				"buffer_size": 3824,
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/order/payment_method.py",
			"settings":
			{
				"buffer_size": 5043,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/patients/patient.xml",
			"settings":
			{
				"buffer_size": 7587,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/patients/patient_treatments.xml",
			"settings":
			{
				"buffer_size": 664,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/patients/patient_legacy.xml",
			"settings":
			{
				"buffer_size": 637,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/patients/patient_personal.xml",
			"settings":
			{
				"buffer_size": 6073,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/orders/order.xml",
			"settings":
			{
				"buffer_size": 16781,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/orders/order_admin.xml",
			"settings":
			{
				"buffer_size": 1863,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/orders/order_account.xml",
			"settings":
			{
				"buffer_size": 2041,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/treatment_vars.py",
			"settings":
			{
				"buffer_size": 566,
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/treatment.TRASH.py",
			"settings":
			{
				"buffer_size": 9114,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/procedure.py",
			"settings":
			{
				"buffer_size": 8759,
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/pro_ses_funcs.py",
			"settings":
			{
				"buffer_size": 4608,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/session_med.py",
			"settings":
			{
				"buffer_size": 8317,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/session.py",
			"settings":
			{
				"buffer_size": 3373,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "models/emr/product.py",
			"settings":
			{
				"buffer_size": 9771,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 375.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"browser",
				"Browse Mode: Right Sidebar"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: install",
				"Package Control: Install Package"
			],
			[
				"python",
				"Build With: Python - Syntax Check"
			],
			[
				"package control:install",
				"Package Control: Install Package"
			]
		],
		"width": 459.0
	},
	"console":
	{
		"height": 256.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_inactive.xml",
		"/Users/gibil/cellar/github/openhealth/data/physicians/base_data_physicians_inactive.xml",
		"/Users/gibil/cellar/github/openhealth/data/physicians/base_data_physicians.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_control_docs.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_personal.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_legacy.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_admin.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_account.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_tree.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order.xml",
		"/Users/gibil/cellar/github/openhealth/models/order/order.py",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_assistants.xml",
		"/Users/gibil/cellar/github/openhealth/models/emr/test_treatment.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/emr/test_treatment.py",
		"/Users/gibil/cellar/github/openhealth/views/treatments/treatment.xml",
		"/Users/gibil/cellar/github/openhealth/views/treatments/treatment.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/models/patient/patient.py",
		"/Users/gibil/cellar/github/openhealth/readme.txt",
		"/Users/gibil/cellar/github/openhealth/views/orders/order.DEP.txt",
		"/Users/gibil/cellar/github/openhealth/models/patient/partner.py",
		"/Users/gibil/cellar/github/openhealth/models/patient/patient.NOTES.py",
		"/Users/gibil/cellar/github/openhealth/models/patient/patient.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_tacna.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_directors.xml",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security.xml",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security_readers.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/buf_tacna.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_oeh.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_platform.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_managers.xml",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security_managers.xml",
		"/Users/gibil/cellar/github/openhealth/views/reports/report_sale_actions.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_doctors.xml",
		"/Users/gibil/cellar/github/openhealth/security/ir.rule.xml",
		"/Users/gibil/cellar/github/openhealth/models/emr/physician.py",
		"/Users/gibil/cellar/github/openhealth/views/configurators/configurator_emr.xml",
		"/Users/gibil/cellar/github/openhealth/models/emr/doctor.py",
		"/Users/gibil/cellar/github/openhealth/models/configurator/configurator_emr.py",
		"/Users/gibil/cellar/github/openhealth/models/emr/treatment.py",
		"/Users/gibil/cellar/github/openhealth/security/ir.model.access.csv",
		"/Users/gibil/cellar/github/openhealth/security/ir.rule.DEP.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_products.xml",
		"/Users/gibil/cellar/github/openhealth/models/configurator/configurator_emr.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/emr/physician.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/emr/consultation.py",
		"/Users/gibil/cellar/github/openhealth/models/emr/doctor.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/__init__.py",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_managers.DEP.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_search.xml",
		"/Users/gibil/cellar/github/openhealth/views/users/user.xml",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security_readers.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/models/emr/__init__.py",
		"/Users/gibil/cellar/github/openhealth/views/physicians/physician.xml",
		"/Users/gibil/cellar/github/openhealth/models/management/management.py",
		"/Users/gibil/cellar/github/openhealth/data/physicians/base_data_physicians.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/data/physicians/base_data_physicians_new.xml",
		"/Users/gibil/cellar/github/openhealth/views/management/management_trees.xml",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_generics.xml",
		"/Users/gibil/cellar/github/openhealth/security/openhealth_security.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/views/menus/menus_dev.xml",
		"/Users/gibil/cellar/github/openhealth/views/base_actions.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_products.xml",
		"/Users/gibil/cellar/github/openhealth/security/buff.txt",
		"/Users/gibil/cellar/github/openhealth/security/buff_2.csv",
		"/Users/gibil/cellar/github/openhealth/views/products/product_template.xml",
		"/Users/gibil/cellar/github/openhealth/models/emr/product.py",
		"/Users/gibil/cellar/github/openhealth/models/emr/treatment.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/views/management/management.xml",
		"/Users/gibil/cellar/github/openhealth/models/order/order_line.py",
		"/Users/gibil/cellar/github/openhealth/data/users/pwds",
		"/Users/gibil/cellar/github/openhealth/views/products/product_actions.xml",
		"/Users/gibil/cellar/github/openhealth/models/pricelist/container_pricelist.py",
		"/Users/gibil/cellar/github/openhealth/models/pricelist/product_pricelist.py",
		"/Users/gibil/cellar/github/openhealth/models/order/test_order.py",
		"/Users/gibil/cellar/github/openhealth/models/order/tick_funcs.py",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_products_new.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_med_dep.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_cos.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_med.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_m22.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_exc.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_co2.xml",
		"/Users/gibil/cellar/github/openhealth/data/prods/odoo_data_services_consult.xml",
		"/Users/gibil/cellar/github/openhealth/min__openerp__.py",
		"/Users/gibil/cellar/github/openhealth/max__openerp__.py",
		"/Users/gibil/cellar/github/openhealth/models/order/payment_method.py",
		"/Users/gibil/cellar/github/openhealth/models/order/payment_method_line.py",
		"/Users/gibil/cellar/github/openhealth/models/order/payment_method_line.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/order/payment_method.TRASH.py",
		"/Users/gibil/cellar/github/openhealth/models/patient/__init__.py",
		"/Users/gibil/cellar/github/openhealth/models/containers/container.py",
		"/Users/gibil/cellar/github/openhealth/models/counter/__init__.py",
		"/Users/gibil/cellar/github/openhealth/views/payment_method/payment_methods.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/views/payment_method/payment_methods.xml",
		"/Users/gibil/cellar/github/openhealth/views/payment_method/payment_method_line.xml",
		"/Users/gibil/cellar/github/openhealth/models/order/__init__.py",
		"/Users/gibil/cellar/github/openhealth/models/counter/counter.py",
		"/Users/gibil/cellar/github/openhealth/models/libs/creates.py",
		"/Users/gibil/cellar/github/openhealth/models/libs/__init__.py",
		"/Users/gibil/cellar/github/openhealth/models/shell.rb",
		"/Users/gibil/cellar/github/openhealth/models/order/qr.py",
		"/Users/gibil/cellar/github/openhealth/models/order/snr.py",
		"/Users/gibil/cellar/github/openhealth/models/libs/user.py",
		"/Users/gibil/cellar/github/openhealth/models/order/ord_vars.py",
		"/Users/gibil/cellar/github/openhealth/views/partners/partner_actions.xml",
		"/Users/gibil/cellar/github/openhealth/views/users/group.xml",
		"/Users/gibil/cellar/github/openhealth/views/counters/counter.xml",
		"/Users/gibil/cellar/github/openhealth/models/patient/count_vars.py",
		"/Users/gibil/cellar/github/openhealth/models/patient/counter.py",
		"/Users/gibil/cellar/github/openhealth/models/clean.sh",
		"/Users/gibil/cellar/github/openhealth/models/pricelist/__init__.py",
		"/Users/gibil/cellar/github/openhealth/views/counters/counter.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/OpenHealth-MIN.sublime-project",
		"/Users/gibil/cellar/github/openhealth/data/users/base_data_users_cash.xml",
		"/Users/gibil/cellar/github/openhealth/views/orders/order_tree.TRASH..xml",
		"/Users/gibil/cellar/github/openhealth/models/order/ord_funcs.py",
		"/Users/gibil/cellar/github/openhealth/views/treatments/treatment.DEP.xml",
		"/Users/gibil/cellar/github/openhealth/views/patients/patient_personal.TRASH.xml",
		"/Users/gibil/cellar/github/openhealth/models/management/mgt_vars.py",
		"/Users/gibil/cellar/github/openhealth/min_min__openerp__.py",
		"/Users/gibil/cellar/github/openhealth/data/categs/base_data_categs_prods.xml",
		"/Users/gibil/cellar/github/openhealth/data/categs/base_data_categs_partners.xml",
		"/Users/gibil/cellar/github/openhealth/views/products/product_search.txt",
		"/Users/gibil/cellar/github/openhealth/views/users/zat/user.TRASH.xml"
	],
	"find":
	{
		"height": 37.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"nr_services_co2",
			"nr_co2",
			"service_co2",
			"service_co2_action",
			"service_actions",
			"service_list_action",
			"nr_services",
			"get_display",
			"search",
			"onchange",
			"base_data_phy",
			"x_family",
			"pl_family",
			"x_family",
			"check",
			"x_family",
			"nr_invoices_cons",
			"x_treatment_count",
			"patient_legacy",
			"legacy",
			"notebook",
			"treatment_ids",
			"x_treatment_count",
			"state = fields.",
			"test_crea",
			"test_",
			"test_foo",
			"test",
			"col=",
			"consultation",
			"machine",
			"pl_family",
			"treatm",
			"nr_invoices",
			"reset",
			"x_dni",
			"patient_per",
			"patiet_per",
			"personal",
			"patient",
			"notebook",
			"treatment",
			"treatment = fi",
			"self.treatment",
			"treatment",
			"configu",
			"x_dni",
			"x_counter",
			"pricelist_id",
			"config",
			"transfer_free",
			"tranfer_free",
			"x_credit",
			"page",
			"notebook",
			"admin",
			"lines",
			"other",
			"payment_method",
			"patient.xml",
			"hc",
			"x_test",
			"test = fields",
			"test",
			"foreign",
			"x_address_f",
			"caregi",
			"care_gi",
			"acom",
			"afuentes",
			"mostos",
			"mmattos",
			"mostos",
			"Mirella Ostos",
			"rep",
			"reporte",
			"menu",
			"rule",
			"physician",
			"patient",
			"create_procedure",
			"action",
			"svargas",
			"essen",
			"vmori",
			"manager",
			"user.xml",
			"sear",
			"relationa",
			"configurator",
			"_id",
			"doctor",
			"doctor_line",
			"#",
			"pereira",
			"phy",
			"physi",
			"create_doctor_data",
			"lloli",
			"lali",
			"loli",
			"button",
			"block",
			"state_ar",
			"base_dir",
			"state_",
			"state",
			"state_array",
			"cancel_order",
			"cance",
			"cancel(",
			"update_doctors",
			"updat_doctors",
			"get_counter",
			"block",
			"config",
			"configura",
			"x_test_sce",
			"x_test_s",
			"x_counter",
			"x_year",
			"x_month",
			"x_doc",
			"medical_phy",
			"physi",
			"doctor",
			"stock",
			"invoi"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"treatment",
			"procedure",
			"legacy",
			"mmattos",
			"Maritza Mattos",
			"",
			"invoice",
			"account",
			"date_corrected",
			"self",
			"cents",
			"words",
			"self",
			"tax",
			"self",
			"product",
			"receptor_",
			"",
			"user",
			"            <field name='pl_price_list'>2018</field>\n            <field name=\"sale_ok\" eval=\"True\" />\n            <field name=\"purchase_ok\" eval=\"False\" />\n        </record>\n",
			"",
			"            <field name='pl_price_list'>2018</field>\n            <field name=\"sale_ok\" eval=\"True\" />\n            <field name=\"purchase_ok\" eval=\"False\" />\n        </record>\n",
			"            <field name=\"sale_ok\" eval=\"True\" />\n            <field name=\"purchase_ok\" eval=\"False\" />\n        </record>\n",
			"\n            <field name='pl_price_list'>2018</field>\n        </record>\n",
			"            <field name='pl_price_list'>2018</field>\n        </record>\n",
			"marketing",
			"ruc",
			"phone",
			"address",
			"company",
			"directors",
			"subfamil",
			"subfamily",
			"2018",
			"<!-- jx -->",
			"('Grado ",
			"price_company",
			"price",
			"min",
			"day_doctor",
			"daily",
			"day_doctor",
			"varicose",
			"get_orders_by_state",
			"reset",
			"line.",
			"day_doctor",
			"rmendoza",
			"rosa",
			"other",
			"value_drop",
			"bonus",
			"return_item",
			"return",
			"discount_item",
			"discount",
			"",
			"dchumpitaz",
			"ssaucedo",
			"Salvador Saucedo",
			"Diana Chumpitaz",
			"dchumpitaz",
			"ssaucedo",
			"correction",
			"cancel_error",
			"cancel",
			"credit_note",
			"pull",
			"consultation",
			"configurator_emr",
			"selection=",
			"string=",
			"domain=",
			"True",
			"session",
			"self.configurator",
			"configurator",
			"ndyag",
			"ipl",
			"quick",
			"qui",
			"ndy",
			"ipl",
			"False",
			"ndyag",
			"ipl",
			"quick",
			"",
			"session",
			"emr",
			"session",
			"exc",
			"ndyag",
			"ipl",
			"quick",
			"procedure",
			"consultation",
			"test_treatment.",
			"pull",
			"event",
			"procedure",
			"consultation",
			"session",
			"procedure",
			"consultation",
			"year",
			"",
			"escudero",
			"abriojo",
			"castillo",
			"loaiza",
			"monteverde",
			"gonzales",
			"escudero",
			"abriojo",
			"castillo",
			"loaiza",
			"monteverde",
			"gonzales",
			"chavarri",
			"year",
			"comments=",
			"selection=",
			"string=",
			"readonly=",
			"2019",
			"appointment_date",
			"day"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "med__openerp__.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10388,
						"regions":
						{
						},
						"selection":
						[
							[
								6092,
								6107
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3280.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "models/emr/treatment.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30202,
						"regions":
						{
						},
						"selection":
						[
							[
								20930,
								20940
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 16648.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "views/treatments/treatment.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25646,
						"regions":
						{
						},
						"selection":
						[
							[
								6599,
								6599
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4011.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "views/services/service_actions.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5371,
						"regions":
						{
						},
						"selection":
						[
							[
								268,
								268
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "views/services/service.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11610,
						"regions":
						{
						},
						"selection":
						[
							[
								11051,
								11051
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5183.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "models/patient/patient.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23761,
						"regions":
						{
						},
						"selection":
						[
							[
								681,
								698
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 687.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "models/order/order.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34266,
						"regions":
						{
						},
						"selection":
						[
							[
								4647,
								4647
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3671.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "models/order/ord_funcs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3824,
						"regions":
						{
						},
						"selection":
						[
							[
								2976,
								3822
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2258.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "models/order/payment_method.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5043,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "views/patients/patient.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7587,
						"regions":
						{
						},
						"selection":
						[
							[
								4690,
								4690
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "views/patients/patient_treatments.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 664,
						"regions":
						{
						},
						"selection":
						[
							[
								493,
								493
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "views/patients/patient_legacy.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 637,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								637
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "views/patients/patient_personal.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6073,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "views/orders/order.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16781,
						"regions":
						{
						},
						"selection":
						[
							[
								300,
								300
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "views/orders/order_admin.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1863,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "views/orders/order_account.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2041,
						"regions":
						{
						},
						"selection":
						[
							[
								1532,
								1532
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 430.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "models/emr/treatment_vars.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 566,
						"regions":
						{
						},
						"selection":
						[
							[
								23,
								23
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "models/emr/treatment.TRASH.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9114,
						"regions":
						{
						},
						"selection":
						[
							[
								80,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "models/emr/procedure.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8759,
						"regions":
						{
						},
						"selection":
						[
							[
								1631,
								1631
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "models/emr/pro_ses_funcs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4608,
						"regions":
						{
						},
						"selection":
						[
							[
								61,
								61
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "models/emr/session_med.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8317,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 118.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "models/emr/session.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3373,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2049.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "models/emr/product.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9771,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4046.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 27.0
	},
	"output.exec":
	{
		"height": 30.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "OpenHealth-MIN.sublime-project",
	"replace":
	{
		"height": 66.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"s",
				"~/cellar/github/openhealth/models/emr/service.py"
			],
			[
				"g",
				"~/cellar/github/openhealth/models/emr/gen_vars.py"
			],
			[
				"m",
				"~/cellar/github/openhealth/models/management/day_doctor_line.py"
			],
			[
				"c",
				"~/cellar/github/openhealth/views/containers/container.xml"
			],
			[
				"o",
				"~/cellar/github/openhealth/models/order/order.py"
			],
			[
				"e",
				"~/cellar/github/openhealth/models/emr/evaluation.py"
			],
			[
				"p",
				"~/cellar/github/openhealth/views/procedures/procedure.xml"
			],
			[
				"t",
				"~/cellar/github/openhealth/models/emr/test_treatment.py"
			],
			[
				"a",
				"~/cellar/github/openhealth/views/appointments/appointment_search.xml"
			],
			[
				"",
				"~/cellar/github/openhealth/views/management/management.xml"
			],
			[
				"l",
				"~/cellar/github/openhealth/models/lib_qr.py"
			],
			[
				"d",
				"~/cellar/github/openhealth/data/prods/odoo_data_services_consult.xml"
			],
			[
				"r",
				"~/cellar/github/openhealth/readme.txt"
			],
			[
				"i",
				"~/cellar/github/openhealth/models/importx.py"
			],
			[
				"pa",
				"~/cellar/github/openhealth/models/patient.py"
			],
			[
				"ap",
				"~/cellar/github/openhealth/models/appfuncs.py"
			],
			[
				"h",
				"~/cellar/github/openhealth/views/histogram/histogram.xml"
			],
			[
				"ka",
				"~/cellar/github/openhealth/views/kardex/kardex.xml"
			],
			[
				"tick",
				"~/cellar/github/openhealth/views/sale_documents/ticket_receipts.xml"
			],
			[
				"sa",
				"~/cellar/github/openhealth/models/sale_proof.py"
			],
			[
				"pro",
				"~/cellar/github/openhealth/views/products/product.xml"
			],
			[
				"z",
				"~/cellar/github/openhealth/models/zone.py"
			],
			[
				"b",
				"~/cellar/github/openhealth/views/base.xml"
			],
			[
				"sec",
				"~/cellar/github/openhealth/security/openhealth_security.xml"
			],
			[
				"_",
				"~/cellar/github/openhealth/__openerp__.py"
			],
			[
				"invoi",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/models/invoice.py"
			],
			[
				"pr",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/models/sale_proof.py"
			],
			[
				"re",
				"~/Virtualenvs/Odoo9-min/odoo/addons/openhealth/views/sale_documents/receipts.xml"
			],
			[
				"service_ndy",
				"views/services/service_ndyag.xml"
			],
			[
				"service_ip",
				"views/services/service_ipl.xml"
			],
			[
				"service",
				"views/services/service_excilite.xml"
			],
			[
				"order",
				"views/orders/order.xml"
			],
			[
				"control",
				"views/controls/control.xml"
			],
			[
				"consult",
				"views/consultations/consultation.xml"
			],
			[
				"procedure",
				"views/procedures/procedure.xml"
			],
			[
				"ser",
				"views/services/service_co2.xml"
			],
			[
				"trea",
				"views/treatments/treatment.xml"
			],
			[
				"patient",
				"views/patients/patient.xml"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/cellar/github/price_list/PriceList.sublime-project"
			],
			[
				"\t",
				"~/Documents/Aptana Studio 3 Workspace/ccdata/ccData.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 232.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
