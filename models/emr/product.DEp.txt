



# ----------------------------------------------------------- Fix  --------------------------------

		# Closed
		if False:

			# Unfixed
			if self.x_name_unfixed in [False, '']:
				self.x_name_unfixed = self.name


			# Fix Name
			# To avoid repetition
			#if len(name_arr) == 4:

			#	for tup in [
			#					('1', '5 min - 1'),
			#					('2', '15 min - 1'),
			#					('3', '30 min - 1'),
			#					('4', '45 min - 1'),
			#				]:

			#		name = self.name.replace(tup[0], tup[1])

				# Fix
			#	self.name = name





# ----------------------------------------------------------- Constraints - Python ----------------
	# Check Name
	@api.constrains('name')
	def _check_name(self):
		"""
		high level support for doing this and that.
		"""

		if False:
		#if True:
			for record in self:

				#if record.name == '0':
				#	raise ValidationError("C Warning: Default code not valid: %s" % record.name)

				# Count
				if record.name != False:
					count = self.env['product.template'].search_count([
																		('name', '=', record.name),
												])
					if count > 1:
						raise ValidationError("Rec Warning: NAME already exists: %s" % record.name)

			# all records passed the test, don't return anything



	# Check Default Code
	@api.constrains('default_code')
	def _check_default_code(self):
		"""
		high level support for doing this and that.
		"""

		if False:
		#if True:
			for record in self:

				if record.default_code == '0':
					raise ValidationError("C Warning: Default code not valid: %s" % record.default_code)

				# Count
				if record.default_code != False:
					count = self.env['product.template'].search_count([
																		('default_code', '=', record.default_code),
												])
					if count > 1:
						raise ValidationError("Rec Warning: DEFAULT CODE already exists: %s" % record.default_code)

		# all records passed the test, don't return anything




	# Check Type
	@api.constrains('type')
	def _check_type(self):

		if False:
		#if True:
			for record in self:
				if record.type == 'consu':
					raise ValidationError("Rec Warning: TYPE not valid: %s" % record.type)

				# Count
				#if record.type != False:
				#	count = self.env['product.template'].search_count([
				#														('type', '=', 'consu'),
				#								])
				#	if count > 0:
				#		raise ValidationError("C Warning: Type already exists: %s" % record.type)

			# all records passed the test, don't return anything





	# Check Code
	@api.constrains('x_code')
	def _check_x_code(self):

		if False:
		#if True:
			for record in self:

				#if record.name == '0':
				#	raise ValidationError("C Warning: Default code not valid: %s" % record.name)

				# Count
				if record.x_code != False:
					count = self.env['product.template'].search_count([
																		('x_code', '=', record.x_code),
												])
					if count > 1:
						raise ValidationError("Rec Warning: CODE already exists: %s" % record.x_code)

			# all records passed the test, don't return anything



