# 23 oct 2020

def set_averages(self):

		# Families
		#if self.nr_other != 0:
		#	self.avg_other = self.amo_other / self.nr_other

		#if self.nr_products != 0:
		#	self.avg_products = self.amo_products / self.nr_products

		#if self.nr_services != 0:
		#	self.avg_services = self.amo_services / self.nr_services

		#if self.nr_consultations != 0:
		#	self.avg_consultations = self.amo_consultations / self.nr_consultations

		#if self.nr_procedures != 0:
		#	self.avg_procedures = self.amo_procedures / self.nr_procedures







# ------------------------------------------- Get orders - By Patient - Drafts --------------
def get_orders_filter_fast_patient_draft(self, date_bx, date_ex, patient):
	"""
	Only Drafts.
	"""
	#print()
	#print('Pl - Get Orders Filter Fast - Patient - Draft')

	# Init
	# Dates
	#DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"
	date_begin = date_bx + ' 05:00:00'
	DATETIME_FORMAT = _DATE_FORMAT

	date_end_dt = datetime.datetime.strptime(date_ex, DATETIME_FORMAT) + \
																		datetime.timedelta(hours=24) + datetime.timedelta(hours=5, minutes=0)

	date_end = date_end_dt.strftime(_DATE_HOUR_FORMAT)

	# Prints
	#print date_end_dt

	# Search

	# Orders
	orders = self.env[_MODEL_SALE].search([
													('state', 'in', ['draft']),
													('date_order', '>=', date_begin),
													('date_order', '<', date_end),
													('patient', '=', patient),
													('x_legacy', '=', False),
											],
												order='x_serial_nr asc',
												#limit=1,
											)
	# Count
	count = self.env[_MODEL_SALE].search_count([
													('state', 'in', ['draft']),
													('date_order', '>=', date_begin),
													('date_order', '<', date_end),
													('patient', '=', patient),
													('x_legacy', '=', False),
											],
												#order='x_serial_nr asc',
												#limit=1,
											)
	return orders, count

# get_orders_filter_fast_patient_draft


# ------------------------------------------------- Get orders - By Patient ----
def get_orders_filter_fast_patient(self, date_bx, date_ex, patient):
	"""
	Only Sales.
	"""
	#print()
	#print('Pl - Get Orders Filter Fast - Patient')

	# Init
	# Dates
	#DATETIME_FORMAT = "%Y-%m-%d %H:%M:%S"
	date_begin = date_bx + ' 05:00:00'
	DATETIME_FORMAT = _DATE_FORMAT

	date_end_dt = datetime.datetime.strptime(date_ex, DATETIME_FORMAT) + \
																		datetime.timedelta(hours=24) + datetime.timedelta(hours=5, minutes=0)

	date_end = date_end_dt.strftime(_DATE_HOUR_FORMAT)

	# Prints
	#print date_end_dt

	# Search

	# Orders
	orders = self.env[_MODEL_SALE].search([
													#('state', 'in', ['sale', 'credit_note']),
													#('state', '=', 'sale'),
													('state', 'in', ['sale']),

													('date_order', '>=', date_begin),
													('date_order', '<', date_end),
													
													('patient', '=', patient),
													('x_legacy', '=', False),
											],
												order='x_serial_nr asc',
												#limit=1,
											)
	# Count
	count = self.env[_MODEL_SALE].search_count([
													#('state', 'in', ['sale', 'credit_note']),
													#('state', '=', 'sale'),
													('state', 'in', ['sale']),

													('date_order', '>=', date_begin),
													('date_order', '<', date_end),
													
													('patient', '=', patient),
													('x_legacy', '=', False),
											],
												#order='x_serial_nr asc',
												#limit=1,
											)
	return orders, count

# get_orders_filter_fast_patient



# ----------------------------------------------------------- Get Orders By Type ------------------
def get_orders_filter_type(self, date_bx, date_ex, x_type):
	"""
	high level support for doing this and that.
	"""

	# Dates
	DATETIME_FORMAT = _DATE_FORMAT
	date_begin = date_bx + ' 05:00:00'

	date_end_dt = datetime.datetime.strptime(date_ex, DATETIME_FORMAT) + \
																		datetime.timedelta(hours=24) + datetime.timedelta(hours=5, minutes=0)

	date_end = date_end_dt.strftime(_DATE_HOUR_FORMAT)


	# Orders
	orders = self.env[_MODEL_SALE].search([
													('state', 'in', ['sale', 'cancel']),
													('date_order', '>=', date_begin),
													('date_order', '<', date_end),
													('x_type', '=', x_type),
											],
												#order='x_serial_nr asc',
												order='x_counter_value asc',
												#limit=1,
											)

	# Count
	count = self.env[_MODEL_SALE].search_count([
													('state', 'in', ['sale', 'cancel']),
													('date_order', '>=', date_begin),
													('date_order', '<', date_end),
													('x_type', '=', x_type),
											],
												#order='x_serial_nr asc',
												#limit=1,
											)

	return orders, count

# get_orders_filter_type
