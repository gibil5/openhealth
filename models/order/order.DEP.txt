

# ----------------------------------------------------------- Cosmeto -------------------------------
	# Cosmetology
	#cosmetology = fields.Many2one(
	#		'openhealth.cosmetology',
	#		ondelete='cascade',
	#		string="Cosmiatría",
	#	)




	x_credit_note_type = fields.Selection(
			#[
				# ('cancel', 		'Anulación'),
				# ('discount', 	'Descuento'),
				# ('bonus', 		'Bonificación'),
				# ('return', 		'Devolución'),
				# ('other', 		'Otros'),

			#	('cancel', 					'01 - Anulación de la operación'),
			#	('cancel_error_ruc', 		'02 - Anulación por error en el RUC'),
			#	('correct_error_desc', 		'03 - Corrección por error en la descripción'),
			#	('discount', 				'04 - Descuento global'),
			#	('discount_item', 			'05 - Descuento por item'),

			#	('return', 					'06 - Devolución total'),
			#	('return_item', 			'07 - Devolución por item'),
			#	('bonus', 					'08 - Bonificación'),
			#	('value_drop', 				'09 - Disminución en el valor'),
			#	('other', 					'10 - Otros'),
			#],

			selection=ord_vars._credit_note_type_list,

			string='Motivo',
		)




# ----------------------------------------------------------- Constraints - From Chk Patient ------

	# Check Serial Number
	#@api.constrains('x_serial_nr')
	#def _check_x_serial_nr(self):
	#	print
		#print 'Check Serial Nr'
		#chk_order._check_x_serial_nr(self)








# ----------------------------------------------------------- Active ----------------------------
	#x_inactive = fields.Boolean(
	#		string="Active",
	#	)








	# Update Pm
	#@api.multi
	#def update_payment(self):
	#	"""
	#	high level support for doing this and that.
	#	"""
		#print
		#print 'Update Payment'

	#	for line in self.x_payment_method.pm_line_ids:
	#		pass
			#print line.name
			#print line.method
			#print line.subtotal





	#date_order = fields.Datetime(string='Order Date', required=True, readonly=True, index=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}, copy=False, default=fields.Datetime.now)



	#state = fields.Selection([
	#	('draft', 'Quotation'),
	#	('sent', 'Quotation Sent'),
	#	('sale', 'Sale Order'),
	#	('done', 'Done'),
	#	('cancel', 'Cancelled'),
	#	], string='Status', readonly=True, copy=False, index=True, track_visibility='onchange', default='draft')





	def validate(self):
		# Check Content - DEP 
		#self.check_content()


# ----------------------------------------------------------- Check - Content ---------------------

	# Personal identifiers: Dni, Ruc 
	# Check for length and digits 

	# Check Content 
	@api.multi 
	def check_content(self):
		#print
		#print 'Check Content'

		#self.x_dni = self.partner_id.x_dni
		#self.x_ruc = self.partner_id.x_ruc

		#print self.patient.name 				# Generates an Error ! With Ñ
		#print 'Dni: ', self.x_dni
		#print 'Ruc: ', self.x_ruc 


		_length = {
					'dni': 8,
					'passport': 12,
					'foreign_card': 12,
					'ptp': 12,					# Verify !
		}


		# Dni - Generalize, to accept other docs (passport, foreign card, ptp)
		if self.x_type in ['ticket_receipt', 'receipt']: 

			#print 'Receipt'

			# Test 


			# Nr of characters
			if self.x_id_doc_type not in ['other']: 
				#length = _length[self.x_id_doc_type]
				x_length = _length[self.x_id_doc_type]

				#ret = lib.test_for_length(self, self.x_id_doc, length)
				ret = lib.test_for_length(self, self.x_id_doc, x_length)
				
				if ret != 0:
					#msg = "Error: Documento debe tener " + str(length) + " caracteres."
					msg = "Error: Documento debe tener " + str(x_length) + " caracteres."
					raise Warning(_(msg))



			# Must be Number - Only for DNIs 
			if self.x_id_doc_type in ['dni']: 
				ret = lib.test_for_digits(self, self.x_id_doc)
				if ret != 0:
					#msg = "Error: DNI debe ser un Número."
					msg = "Error: Documento debe ser un Número."
					raise Warning(_(msg))
	


			# Update 
			self.partner_id.x_dni = self.x_dni



		# Ruc
		elif self.x_type in ['ticket_invoice', 'invoice']: 

			#print 'Invoice'
			#print self.x_ruc
			

			# Test 
			#length = 11
			x_length = 11

			#ret = lib.test_for_length(self, self.x_ruc, length)
			ret = lib.test_for_length(self, self.x_ruc, x_length)
			
			if ret != 0:
				#msg = "Error: RUC debe tener " + str(length) + " caracteres."
				msg = "Error: RUC debe tener " + str(x_length) + " caracteres."
				raise Warning(_(msg))

			ret = lib.test_for_digits(self, self.x_ruc)
			if ret != 0:
				msg = "Error: RUC debe ser un Número."
				raise Warning(_(msg))

			# Update 
			self.partner_id.x_ruc = self.x_ruc


