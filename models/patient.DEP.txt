

# ----------------------------------------------------------- Test - Cycle ------------------------------------------------------
	# Test - Cycle 
	# Test the whole Patient Cycle. 

	@api.multi 
	def test_cycle(self):
		#print 
		#print 'Test Cycle'

		# Init 
		patient_id = self.id
		partner_id = self.partner_id.id
		id_doc = self.x_id_doc
		id_doc_type = self.x_id_doc_type
		short_name = self.x_test_case.split(',')[2]
		qty = int(self.x_test_case.split(',')[3])


		# Loop 
		for treatment in self.treatment_ids: 

			# Init 
			treatment_id = treatment.id 
			doctor_id = False 

			# Create 
			order = creates.create_order_fast(self, patient_id, partner_id, doctor_id, treatment_id, id_doc, id_doc_type, short_name, qty)

			# Pay 
			order.test(self.x_test_case)

			# Update 
			#creates.update_order(date_order)










# ----------------------------------------------------------- Constraints Python - Dep ------------------
	# Check Phone 3
	#@api.constrains('phone_3')
	#def _check_phone_3(self):
		#print
		#print 'Check Phone 3'
		#chk_patient._check_phone_3(self)

	# Check Phone
	#@api.constrains('phone')
	#def _check_phone(self):
		#print
		#print 'Check Phone'
		#chk_patient._check_phone(self)

	# Check Mobile
	#@api.constrains('mobile')
	#def _check_mobile(self):
		#print
		#print 'Check Mobile'
		#chk_patient._check_mobile(self)





# ----------------------------------------------------------- Update - Id Docs ------------------------------------------------------

	# Update Id Docs 
	@api.multi
	def update_id_docs(self):
		#print
		#print 'Update Id Docs'

		# Search 
 		#patients = self.env['oeh.medical.patient'].search([
		#														('x_legacy', '!=', True), 
		#												],
															#order='write_date desc',
		#													#limit=1,
		#												)

 		count_1 = self.env['oeh.medical.patient'].search_count([
																('x_legacy', '!=', True), 
														],
															#order='write_date desc',
															#limit=1,
														)
 		count_2 = self.env['oeh.medical.patient'].search_count([
																('x_legacy', '=', True), 
														],
															#order='write_date desc',
															#limit=1,
														)
 		print count_1 
 		print count_2



# ----------------------------------------------------------- On Change - Id Docs ------------------------------------------------------
	# Id Doc  
	#@api.onchange('x_id_doc')
	#def _onchange_x_id_doc(self):
		#self.autofill() if self.x_autofill == True else 'don'
		
		#if self.x_id_doc_type in ['dni']: 
		#	self.x_dni = self.x_id_doc
