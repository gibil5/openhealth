


#------------------------------------------------ Format Standard ---------------------------------
def format_std(line):
	"""
	Format Standard
	"""
	#print
	#print 'Format Standard'
	_se = ","
	content = correct_date(line.x_date_created) + _se + \
				line.serial_nr + _se + \
				line.patient.name + _se + \
				line.patient.x_id_doc_type + _se + \
				line.patient.x_id_doc + _se + \
				line.product_id.name
				#line.patient.x_firm + _se + \
				#line.patient.x_ruc + _se + \
				#line.patient.email + _se + \
				#line.patient.name.encode('utf-8')
				#line.patient.name + _se +
				#line.patient.x_dni + _se +
				#lr.encode('utf-8')
	return content



#------------------------------------------------ Print -------------------------------------------
def print_line(order):
	"""
	Print a line
	"""
	print
	print 'Print'
	print order
	print order.x_date_created
	print order.patient.name
	print order.patient.x_id_doc
	print order.patient.x_id_doc_type
	print order.patient.x_firm
	print order.patient.x_ruc
	print order.patient.email
	print
	print order.serial_nr
	print order.product_id.name
	print




#------------------------------------------------ Patient - Test content --------------------------
# Length
def test_for_length(self, token, length):
	"""
	Test for Length
	"""
	#print
	#print 'Lib - Test for Length'
	print token
	print length

	if token and (len(str(token)) != length):
		return {
				'warning': {
					'title': "Error: Debe tener " + str(length) + " caracteres.",
					'message': token,
				}}
	else:
		return 0
# test_for_length



# Digits
def test_for_digits(self, token):
	"""
	Test for Digits
	"""

	if token and (not token.isdigit()):
		return {
				'warning': {
					'title': "Error: Debe ser n√∫mero.",
					'message': token,
				}}
	else:
		return 0
# test_for_digits
